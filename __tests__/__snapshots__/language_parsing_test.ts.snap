// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`syntax functions test #extend 1`] = `
Array [
  Object {
    "token": "A",
    "value": "a",
  },
  Object {
    "token": "B",
    "value": "b",
  },
  Object {
    "token": "C",
    "value": "c",
  },
  Object {
    "token": Symbol(EOF),
    "value": "",
  },
]
`;

exports[`syntax functions test #extend 2`] = `
Object {
  "grammar": Object {
    "rules": Array [
      Object {
        "ltoken": "S",
        "pattern": Array [
          "A",
          "B",
          "C",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "rules": Array [
      Object {
        "pattern": /a/,
        "states": Array [
          "state3",
        ],
        "token": "A",
      },
      Object {
        "pattern": /b/,
        "states": Array [
          "state2",
        ],
        "token": "B",
      },
      Object {
        "pattern": /c/,
        "states": Array [
          "default",
        ],
        "token": "C",
      },
    ],
    "start_state": "state3",
    "states": Array [
      Object {
        "inheritance": "default",
        "label": "state1",
      },
      Object {
        "inheritance": "default",
        "label": "state2",
      },
      Object {
        "inheritance": "state2",
        "label": "state3",
      },
    ],
  },
}
`;

exports[`syntax functions test #start 1`] = `
Object {
  "grammar": Object {
    "rules": Array [
      Object {
        "ltoken": "S",
        "pattern": Array [
          "A",
          "B",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "rules": Array [
      Object {
        "pattern": /a/,
        "states": Array [
          "default",
        ],
        "token": "A",
      },
      Object {
        "pattern": /a/,
        "states": Array [
          "state1",
          "state2",
        ],
        "token": "A2",
      },
      Object {
        "pattern": /b/,
        "token": "B",
      },
    ],
    "start_state": "state1",
  },
}
`;

exports[`syntax functions test callback delimiters 1`] = `
Object {
  "grammar": Object {
    "rules": Array [
      Object {
        "callback": [Function],
        "ltoken": "S",
        "pattern": Array [
          "T",
        ],
      },
      Object {
        "callback": [Function],
        "ltoken": "T",
        "pattern": Array [
          "E",
        ],
      },
      Object {
        "callback": [Function],
        "ltoken": "E",
        "pattern": Array [],
      },
      Object {
        "ltoken": "E",
        "pattern": Array [
          "A",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "rules": Array [
      Object {
        "callback": [Function],
        "pattern": "a",
        "token": "A",
      },
    ],
  },
}
`;

exports[`syntax functions test callback delimiters 2`] = `
Array [
  "function anonymous(children,token,lexer
) {
 const s = {}; 
}",
  "function anonymous(children,token,lexer
) {
 const t = \\"}%, }}%, }}%%, }%%%, }}%%%\\"; 
}",
  "function anonymous(children,token,lexer
) {
 const e = \\"}%\\"+\\"}}\\"; 
}",
  undefined,
]
`;

exports[`syntax functions test callbacks 1`] = `
Object {
  "grammar": Object {
    "rules": Array [
      Object {
        "callback": [Function],
        "ltoken": "S",
        "pattern": Array [
          "T",
        ],
      },
      Object {
        "callback": [Function],
        "ltoken": "T",
        "pattern": Array [
          "A",
        ],
      },
      Object {
        "callback": [Function],
        "ltoken": "T",
        "pattern": Array [
          "E",
        ],
      },
      Object {
        "callback": [Function],
        "ltoken": "T",
        "pattern": Array [],
      },
      Object {
        "callback": [Function],
        "ltoken": "E",
        "pattern": Array [],
      },
      Object {
        "ltoken": "E",
        "pattern": Array [
          "B",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "rules": Array [
      Object {
        "callback": [Function],
        "pattern": "a",
        "token": "A",
      },
      Object {
        "callback": [Function],
        "pattern": /b/,
        "token": "B",
      },
    ],
  },
}
`;

exports[`syntax functions test callbacks 2`] = `
Array [
  "function anonymous(children,token,lexer
) {
 callback_of_S(); 
}",
  "function anonymous(children,token,lexer
) {
 callback_of_T_1(); 
}",
  "function anonymous(children,token,lexer
) {
 callback_of_T_2(); 
}",
  "function anonymous(children,token,lexer
) {
 callback_of_T_3(); 
}",
  "function anonymous(children,token,lexer
) {
 callback_of_E(); 
}",
  undefined,
]
`;

exports[`syntax functions test ex-callbacks 1`] = `
Object {
  "grammar": Object {
    "begin_callback": [Function],
    "default_callback": [Function],
    "end_callback": [Function],
    "rules": Array [
      Object {
        "ltoken": "S",
        "pattern": Array [
          "A",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "begin_callback": [Function],
    "default_callback": [Function],
    "end_callback": [Function],
    "rules": Array [
      Object {
        "pattern": "a",
        "token": "A",
      },
    ],
  },
}
`;

exports[`syntax functions test ex-callbacks 2`] = `
"function anonymous(value,token,lex
) {
 lex_begin_callback(); 
}"
`;

exports[`syntax functions test ex-callbacks 3`] = `
"function anonymous(value,token,lex
) {
 lex_default_callback(); 
}"
`;

exports[`syntax functions test ex-callbacks 4`] = `
"function anonymous(value,token,lex
) {
 lex_end_callback(); 
}"
`;

exports[`syntax functions test ex-callbacks 5`] = `
"function anonymous(children,token,lexer
) {
 grammar_begin_callback(); 
}"
`;

exports[`syntax functions test ex-callbacks 6`] = `
"function anonymous(children,token,lexer
) {
 grammar_default_callback(); 
}"
`;

exports[`syntax functions test ex-callbacks 7`] = `
"function anonymous(children,token,lexer
) {
 grammar_end_callback(); 
}"
`;

exports[`syntax functions test lex-state 1`] = `
Object {
  "grammar": Object {
    "rules": Array [
      Object {
        "ltoken": "S",
        "pattern": Array [
          "A",
          "B2",
          "C",
        ],
      },
    ],
    "start_symbol": "S",
  },
  "lex": Object {
    "rules": Array [
      Object {
        "pattern": /a/,
        "token": "A",
      },
      Object {
        "pattern": /b/,
        "states": Array [
          "state1",
          "state2",
        ],
        "token": "B",
      },
      Object {
        "pattern": /b/,
        "states": Array [
          "default",
        ],
        "token": "B2",
      },
      Object {
        "pattern": /c/,
        "token": "C",
      },
    ],
  },
}
`;
